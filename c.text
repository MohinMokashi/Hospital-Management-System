
const express = require('express');
const mongoose = require('mongoose');
const path = require('path');
const session = require('express-session');
const bodyParser = require('body-parser');
const bcrypt = require('bcrypt');
const multer = require('multer');
const fs = require('fs');

const app = express();

app.use(express.static(__dirname));
app.use(express.urlencoded({ extended: true }));
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'uploads')));

mongoose.connect('mongodb://127.0.0.1:27017/patients', { useNewUrlParser: true, useUnifiedTopology: true });
const db = mongoose.connection;
db.once('open', () => {
    console.log("Mongodb connection successful");
});

mongoose.connection.once('open', async () => {
    console.log("Mongodb connection successful");

    try {
        const indexes = await Pdf.collection.getIndexes();
        console.log("Indexes:", indexes); 

     
        if (Array.isArray(indexes)) {
            const indexExists = indexes.some(index => index.name === 'email_1');

            if (indexExists) {
                await Pdf.collection.dropIndex('email_1'); 
                console.log("Index 'email_1' dropped successfully");
            } else {
                console.log("Index 'email_1' does not exist. Creating the index...");
                await Pdf.collection.createIndex({ email: 1 }, { name: 'email_1' });
                console.log("Index 'email_1' created successfully");
            }
        } else {
            
            console.error("Expected indexes to be an array, but got:", indexes);
        }
    } catch (error) {
        console.error("Error handling index:", error);
    }
});

const userSchema = new mongoose.Schema({
    name: String,
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    number: String,
    gender: String,
    path:String
});
const User = mongoose.model('User ', userSchema);

const pdfSchema = new mongoose.Schema({
    filename: String,
    path: String,
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User ' }
});
const Pdf = mongoose.model('Pdf', pdfSchema);

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));


app.use(session({
    secret: 'your_secret_key', 
    resave: false,
    saveUninitialized: true,
    cookie: { secure: false } 
}));


app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'SignUp.html')); 
});


app.post('/post', async (req, res) => {
    const { name, email, password, number, gender } = req.body;

    try {
        
        const existingUser  = await User.findOne({ email });
        if (existingUser ) {
            return res.status(400).send("Email already registered. Please use a different email."); 
        }

        
        const saltRounds = 10;
        const hashedPassword = await bcrypt.hash(password, saltRounds);

        const user = new User({ name, email, password: hashedPassword, number, gender });
        await user.save();
        console.log(user);
        res.send("User  registered successfully");
    } catch (error) {
        console.error('Error saving user:', error);
        res.status(500).send("Error saving user");
    }
});

app.get('/login', (req, res) => {
    res.sendFile(path.join(__dirname,'login.html'));
});


app.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
      
        const user = await User.findOne({ email });

        if (user) {
          
            const match = await bcrypt.compare(password, user.password);
            if (match) {
              
                req.session.userId = user._id;
                return res.redirect('/main'); 
            } else {
                return res.status(401).send("Invalid email or password."); 
            }
        } else {
            return res.status(404).send("User  not found."); 
        }
    } catch (error) {
        console.error('Error during login:', error);
        return res.status(500).send("Internal server error."); 
    }
});
app.get('/main', (req, res) => {
    if (!req.session.userId) {
        return res.redirect('/login');
    }
    res.sendFile(path.join(__dirname, 'main.html')); 
});


app.get('/verify', (req, res) => {
    res.sendFile(path.join(__dirname, 'verify.html')); 
});


app.post('/verify', async (req, res) => {
    const { email, password } = req.body;

   
    const user = await User.findOne({ email });

    if (user) {
        
        const match = await bcrypt.compare(password, user.password);
        if (match) {
            
            res.render('userDetails', { user });
        } else {
            res.send("Verification failed. Please check your email and password.");
        }
    } else {
        res.send("Verification failed. User not found.");
    }
});


const appointmentSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true },
    number: { type: String, required: true },
    gender: { type: String, required: true },
    date: { type: Date, required: true },
    time: { type: String, required: true },
    doctorID: { type: String, required: true } 
});
const Appointment = mongoose.model('Appointment', appointmentSchema);
app.post('/appointment', async (req, res) => {
    const { name, number, email, password, gender, date, time ,doctorID} = req.body;
    const fullName = Array.isArray(name) ? name.join(' ') : name;

    
    console.log('Appointment Details:', {
        name: fullName,
        number,
        email,
        password,
        gender,
        date,
        time,
        doctorID
    });

    const appointment = new Appointment({
        name: fullName, 
        email,
        password,
        number,        
        gender,
        date,
        time,
        doctorID
    });

    try {
        await appointment.save(); 
        console.log(appointment); 
        res.send("Form submitted successfully");
    } catch (error) {
        console.error('Error saving user:', error);
        res.status(500).send("Error saving user");
    }
});

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'uploads/');
    },
    filename: (req, file, cb) => {
        cb(null, file.originalname);
    }
});
const upload = multer({ storage: storage });

app.get('/Drcheck', (req, res) => {
    res.sendFile(path.join(__dirname, 'DrCheck.html'));
});

app.post('/verify1', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });

        if (user) {
            const match = await bcrypt.compare(password, user.password);
            if (match) {
                req.session.userId = user._id; 
                res.redirect('/profile');
            } else {
                res.send("Verification failed. Please check your email and password.");
            }
        } else {
            res.send("Verification failed. User not found.");
        }
    } catch (error) {
        console.error('Error during verification:', error);
        res.status(500).send("Error during verification");
    }
});

app.get('/profile', async (req, res) => {
    if (!req.session.userId) return res.redirect('/');
    const user = await User.findById(req.session.userId);
    res.render('profile', { email: user.email });
});


app.post('/upload', upload.single('pdfFile'), async (req, res) => {
    if (!req.session.userId) {
        return res.status(400).send("User  ID is not set in session");
    }

    const newPdf = new Pdf({
        filename: req.file.originalname,
        path: req.file.path,
        userId: req.session.userId, 
        email: req.body.email 
    });

    try {
        await newPdf.save();
        res.redirect('/download');
    } catch (err) {
        console.error(err); 
        res.status(500).send("Error saving PDF");
    }
});

// app.post('/delete', (req, res) => {
//     const { filename } = req.body;
//     fs.unlink(path.join(__dirname, 'uploads', filename), (err) => {
//         if (err) return res.send('File not found');
//         res.redirect('/profile');
//     });
// });
app.post('/delete-pdf', async (req, res) => {
    if (!req.session.userId) {
        return res.status(401).send("User  not authenticated"); // Ensure the user is logged in
    }

    const { pdfId } = req.body; // Get the PDF ID from the request body

    try {
        // Find the PDF document by ID and ensure it belongs to the logged-in user
        const pdf = await Pdf.findOne({ _id: pdfId, userId: req.session.userId });

        if (!pdf) {
            return res.status(404).send("PDF not found or does not belong to you"); // Handle case where PDF is not found
        }

        // Delete the PDF document from the database
        await Pdf.deleteOne({ _id: pdfId });

        // Delete the actual file from the server's file system
        fs.unlink(pdf.path, (err) => {
            if (err) {
                console.error("Error deleting file:", err);
                return res.status(500).send("Error deleting file");
            }
            console.log("File deleted successfully");
            res.send("PDF deleted successfully");
        });
    } catch (error) {
        console.error('Error deleting PDF:', error);
        res.status(500).send("Error deleting PDF");
    }
});
app.get('/download', async (req, res) => {
    if (!req.session.userId) {
        return res.redirect('/login'); // Ensure the user is logged in
    }

    try {
        // Fetch PDFs associated with the logged-in user
        const pdfs = await Pdf.find({ userId: req.session.userId }); // Fetch PDFs for the logged-in user
        res.render('download', { pdfs }); // Render the download.ejs view with the fetched PDFs
    } catch (err) {
        console.error(err);
        res.status(500).send("Error retrieving files");
    }
});


app.get('/check', (req, res) => {
    res.sendFile(path.join(__dirname, 'check.html'));
});
app.post('/verify2', async (req, res) => {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (user && await bcrypt.compare(password, user.password)) {
        req.session.userId = user._id;
        res.redirect('/download');
    } else {
        res.send('Invalid email or password');
    }
});

app.get('/logout', (req, res) => {
    req.session.destroy();
    res.redirect('/');
});

app.listen(3000, () => {
    console.log('Server is running on http://localhost:3000');
});
